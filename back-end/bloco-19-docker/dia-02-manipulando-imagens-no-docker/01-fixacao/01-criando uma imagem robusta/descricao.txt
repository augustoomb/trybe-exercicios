o trecho abaixo explica os arquivos nesta pasta. Esse texto √© apenas um trecho do arquivo docker-detalhado.txt, que est√° na pasta dropbox do bloco 19:

	Criando imagens mais robustas
	
	Para este novo exemplo, vamos criar um servidor web novamente, por√©m haver√° uma etapa de pr√©-processamento. Para esta etapa, vamos utilizar uma ferramenta chamada Hugo, que nos permite criar p√°ginas web a partir de templates.
		
		O objetivo da ferramenta Hugo √© facilitar a cria√ß√£o de p√°ginas, de modo que as pessoas possam focar mais em escrever o conte√∫do do que se preocupar com tags HTML das p√°ginas.
		
			Vamos come√ßar criando tr√™s arquivos, sendo eles:
			
				config.toml: ser√° um arquivo de configura√ß√£o para o Hugo:
					
					name = "Meu site em Hugo"
					
				
				
				index.html: ser√° o template HTML que o Hugo utilizar√° para gerar p√°ginas:
					
					<!DOCTYPE html>
					<html>
						<head>
							<title>{{ .Title }}</title>
							<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
						</head>
						<body>
							<h1>{{ .Title }}</h1>
							{{ .Content }}
						</body>
					</html>	
					
					
				
				_index.md: ser√° o arquivo com o conte√∫do de fato:
				
					---
					title: Meu site em Hugo
					---

					Meu conte√∫do super interessante!
	
	
	
				e o nosso Dockerfile:
				
					FROM nginx:1.21-alpine AS primeiro-estagio
					WORKDIR /site

					COPY config.toml config.toml
					COPY index.html /site/layouts/index.html
					COPY _index.md /site/content/_index.md

					RUN apk add hugo
					RUN hugo --minify --gc
					RUN mv /site/public/* /usr/share/nginx/html

					ENTRYPOINT ["nginx", "-g", "daemon off;"]
					
					
					
					------
					explicando o dockerfile acima:
					
						FROM nginx:1.21-alpine AS primeiro-estagio
						
							O FROM j√° √© nosso velho conhecido, mas agora temos um prefixo: AS;
							Considere que durante o build podemos estar em est√°gios diferentes, e neste caso n√≥s acabamos de nomear o est√°gio atual para primeiro-estagio;
							Dar nome aos est√°gios ser√° √∫til pra gente mais adiante, por√©m neste caso n√£o tem efeito algum.
							
						WORKDIR /site
						
							A palavra reservada WORKDIR indica para o Docker qual √© a pasta atual de trabalho dentro da imagem;
							Ou seja, nas pr√≥ximas a√ß√µes deste build e tamb√©m quando essa imagem for executada como um container, estaremos no caminho especificado pelo WORKDIR.
							
						Tr√™s linhas com COPY
						
							Aqui copiamos os tr√™s arquivos no formato de pastas que o Hugo espera que estes arquivos estejam;
							N√£o temos nenhuma novidade no uso do COPY aqui.
							
						Tr√™s linhas com RUN
						
							A palavra reservada RUN indica que o comando √† frente deve ser executado imediatamente, durante o processo de build. Logo:
								A primeira linha com RUN instala o ferramenta Hugo na nossa imagem Docker;
								A segunda linha executa o comando hugo --minify --gc para gerar as p√°ginas finais em HTML, baseados nos arquivos de templates (index.html) e conte√∫dos (_index.md);
								A terceira linha executa o comando mv para mover as p√°ginas resultantes do Hugo para o caminho onde o nginx espera que tenha p√°ginas HTML para serem servidas.
								
						ENTRYPOINT ["nginx", "-g", "daemon off;"]
						
							A palavra reservada ENTRYPOINT indica para o Docker qual comando deve ser executado ao iniciar o container.
							
						----
						‚ö†Ô∏èImportante: voc√™ pode ter percebido que a fun√ß√£o do ENTRYPOINT parece ser a mesma que o CMD que est√°vamos usando anteriormente ü§î. Essa d√∫vida √© normal e em breve vamos explicar a diferen√ßa de uso entre a fun√ß√£o do ENTRYPOINT e o CMD.
